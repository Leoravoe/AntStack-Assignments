# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: user-and-blogs

plugins:
   - serverless-appsync-plugin
  #  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  lambdaHashingVersion: 20201221
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "cognito-idp:AdminInitiateAuth"
            - "cognito-idp:AdminCreateUser"
            - "cognito-idp:AdminSetUserPassword"
          Resource: "*"
        - Effect: "Allow"
          Action:            
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:GetItem"
            - "dynamodb:Query"
            - "dynamodb:Scan"
          # Resource: 
          #   - { "Fn::GetAtt": ["UserDynamoDBTable", "Arn"] } 
          #   - { "Fn::GetAtt": ["BlogsDynamoDBTable", "Arn"] }
          Resource: 
            - "Fn::Join": 
              - ""
              - - Fn::GetAtt: ["UserDynamoDBTable", "Arn"]
                - "*"
            - "Fn::Join": 
              - ""
              - - Fn::GetAtt: ["BlogsDynamoDBTable", "Arn"]
                - "*"
# you can define service wide environment variables here
  environment:
    UsersTable : ${self:custom.USERS_TABLE}
    BlogsTable : ${self:custom.BLOGS_TABLE}
    user_pool_id:
      Ref: CognitoUserPool
    client_id:
      Ref: CognitoUserClient


custom:      
  USERS_TABLE: UserTable
  BLOGS_TABLE: BlogTable
  LambdaAuthName : LambdaAuthorization
  appSync:
    name: appsync-user-blogs
    authenticationType: API_KEY
    # userPoolConfig:
    #   awsRegion: # defaults to provider region
    #   defaultAction: ALLOW 
    #   userPoolId:
    #     Ref : CognitoUserPool
    #   appIdClientRegex: # optional
    # additionalAuthenticationProviders:
    #   - authenticationType: AWS_LAMBDA
    #     lambdaAuthorizerConfig:
    #       The function name in your serverless.yml. Ignored if lambdaFunctionArn is provided.
    #       functionName: ${self:custom.LambdaAuthName}
    #       functionAlias: # optional, used with functionName
    #       lambdaFunctionArn: 
    #         Fn::GetAtt: ["AuthorizationLambdaFuncLambdaFunction", "Arn"]
    #         arn:aws:lambda:${self:provider.region}:*:function:${self:custom.LambdaAuthName}
    #       identityValidationExpression: # optional
    #       authorizerResultTtlInSeconds: # optional
    mappingTemplates:
        # Users
      - type: Mutation
        field: signupUser
        dataSource: signupUserFunction
        request: false
        response: false
        
      - type: Mutation
        field: signinUser
        dataSource: signinUserFunction
        request: false
        response: false

      - type: Mutation
        field: createUser
        dataSource: createUserFunction
        request: false
        response: false

      - type: Mutation
        field: updateUser
        dataSource: updateUserFunction
        request: false
        response: false
        
      - type: Mutation
        field: deleteUser
        dataSource: deleteUserFunction
        request: false
        response: false
        
      - type: Query
        field: getUser
        dataSource: getUserFunction
        request: false
        response: false


      
        # Blogs
      - type: Mutation
        field: createBlog
        dataSource: createBlogFunction
        request: false
        response: false

      - type: Mutation
        field: updateBlog
        dataSource: updateBlogFunction
        request: false
        response: false
        
      - type: Mutation
        field: deleteBlog
        dataSource: deleteBlogFunction
        request: false
        response: false
        
      - type: Query
        field: getBlogById
        dataSource: getBlogByIdFunction
        request: false
        response: false

      - type: Query
        field: getBlogs
        dataSource: getBlogsFunction
        request: false
        response: false


    dataSources:   
        #  Users
      - type: AWS_LAMBDA
        name: signupUserFunction
        config:
          functionName: signupUser

      - type: AWS_LAMBDA
        name: signinUserFunction
        config:
          functionName: signinUser

      - type: AWS_LAMBDA
        name: createUserFunction
        config:
          functionName: createUser

      - type: AWS_LAMBDA
        name: updateUserFunction
        config:
          functionName: updateUser

      - type: AWS_LAMBDA
        name: deleteUserFunction
        config:
          functionName: deleteUser
          
      - type: AWS_LAMBDA
        name: getUserFunction
        config:
          functionName: getUser

        # Blogs
      - type: AWS_LAMBDA
        name: createBlogFunction
        config:
          functionName: createBlog

      - type: AWS_LAMBDA
        name: updateBlogFunction
        config:
          functionName: updateBlog

      - type: AWS_LAMBDA
        name: deleteBlogFunction
        config:
          functionName: deleteBlog
          
      - type: AWS_LAMBDA
        name: getBlogByIdFunction
        config:
          functionName: getBlogById
          
      - type: AWS_LAMBDA
        name: getBlogsFunction
        config:
          functionName: getBlogs

# you can add packaging informat
functions:

  # Authorization lambda function
  AuthorizationLambdaFunc:
    handler: Authorization/auth.auth

  # Users handler functions
  signupUser:
    handler: User/userHandler.signupUser
  signinUser:
    handler: User/userHandler.signinUser
  createUser:
    handler: User/userHandler.createUser
  updateUser:
    handler: User/userHandler.updateUser
  deleteUser:
    handler: User/userHandler.deleteUser
  getUser:
    handler: User/userHandler.getUser
  
  # Blogs handler functions
  createBlog:
    handler: Blogs/blogsHandler.createBlog
  updateBlog:
    handler: Blogs/blogsHandler.updateBlog
  deleteBlog:
    handler: Blogs/blogsHandler.deleteBlog
  getBlogById:
    handler: Blogs/blogsHandler.getBlogById
  getBlogs:
    handler: Blogs/blogsHandler.getBlogs

resources:
  Resources:
    UserDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.USERS_TABLE}
    BlogsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          # - AttributeName: userId
          #   KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection: 
              ProjectionType: "ALL"
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.BLOGS_TABLE}
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        # Generate a name based on the stage
        UserPoolName: ${self:provider.stage}-user-pool
        # Set email as an alias
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
    CognitoUserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool
        GenerateSecret: false
        UserPoolId:
          Ref: CognitoUserPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"